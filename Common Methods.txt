Common Methods
______________

DCIteratorBinding dummyBasicIter = CommonADFUtils.findIterator("DummyPatientSearchROVIterator");
OR
private Supplier<PageDefinition> pageDef = ()-> PageDefinitionImpl.findPageDefinition(null);//global variable

ToolSetsROVImpl vo = toolSetView();

private ToolSetsROVImpl toolSetView(){
    return (ToolSetsROVImpl) pageDef.get()
                                    .getIterator("ToolSetsROVIterator")
                                    .getViewObject();
}
//find iterator by name
________________________________________________________________________________________________________

getUserBean().getUserHospitalId();
getUserBean().getUserLanguageId();
getUserBean().getUserId();
CommonUserDataFactory.getCommonUserData().getHospitalId();
//get session details | get common user data
________________________________________________________________________________________________________

CommonJSFUtils.putInPageFlowScope("basicRegistration", false); 
// to add new page flow scope with value
________________________________________________________________________________________________________

getRuleValue("ADT_PATFILE_REQ", "N"); //by bean code
new BigDecimal(adf.userSession.userData.rules.getRuleValue('OR_ANESTHIA_TEAM','0'))// by VO grovy exprition
sharedLookupBean.ruleValue['HHCSERVCDEPT,-1'] eq row.ToServiceDept in page source

// return rules value by name and if null return second parameter // extends OasisModelUtils
________________________________________________________________________________________________________

showOasisBusinessMessage(new BigDecimal(43));

// show msg by errore ==> the common method will get errore type from DB
________________________________________________________________________________________________________

OasisBusinessException msg = new OasisBusinessException(BigDecimal.valueOf(9723));
return msg.getErrorMessage();
// return error msg details by error no from DB
________________________________________________________________________________________________________
                   
getConfirmNoFilePopup().show(new RichPopup.PopupHints());

	
public RichPopup getConfirmNoFilePopup() {
  RichPopup popup = (RichPopup) CommonJSFUtils.findComponent("nomedicalprofiledialog");
  return popup;
}
// call popup 
________________________________________________________________________________________________________

    OasisBusinessException message = new OasisBusinessException(BigDecimal.valueOf(9724));
    OasisDynamicPopup.showErrorMessage(message.getErrorMessage());
// call popup OasisDynamicPopup used OasisNavigationContext
________________________________________________________________________________________________________

Object healthId = CommonADFUtils.getBoundAttributeValue("Healthid");
Boolean disableDemoAndIDsFlag = Boolean.FALSE;
if(healthId != null && "N".equals(disableDemoAndIDsRule))
    disableDemoAndIDsFlag = Boolean.TRUE;
CommonJSFUtils.putInPageFlowScope("disableDemoAndIDs", disableDemoAndIDsFlag);
OR
protected BigDecimal getIosMainMemo() {
    return pageDef.get()
            .getAttributeValue("IosMainMemo")
            .map(Object::toString)
            .map(BigDecimal::new)
            .orElse(null);
}
//read value from bindings and set it in page flow scope
________________________________________________________________________________________________________

Object modeObj = CommonJSFUtils.getFromPageFlowScope("Scope.SearchMode}");
OR
String mode = CommonJSFUtils.resolveExpressionAsString("#{pageFlowScope.SearchMode}");
OR
public BigDecimal workEntity(){
    return getFromPageFlowScope("workEntity", BigDecimal.class);
}

// get page flow scope
________________________________________________________________________________________________________

DCIteratorBinding advancedSearchIter = CommonADFUtils.findIterator("PatientSearchAdvancedROVIterator");
PatientSearchAdvancedROVImpl advancedSearchVO =
    (PatientSearchAdvancedROVImpl) advancedSearchIter.getViewObject();
advancedSearchVO.setApplyViewCriteriaName(null);
advancedSearchVO.executeEmptyRowSet();
//clear iterator by set null to view object
________________________________________________________________________________________________________

vo.setNamedWhereClauseParam("P_CalledFromMainMenuParam", getPageCalledFromMainMenu());
OR
dummyBasicVO.setMaxFetchSize(-1);
dummyBasicVO.setWhereClause(whereClause);
//filter query direct 
________________________________________________________________________________________________________

CommonJSFUtils.resolveMethodExpression("#{bindings.ToolSetsROV.collectionModel.makeCurrent}", null,
    new Class[] { SelectionEvent.class }, new Object[] { selectionEvent });
//make selection listener for table from bean 
________________________________________________________________________________________________________

#{viewScope.detailsBean.actionRemoveProcedure(row.row)}

    public void actionRemoveToolSet(ToolSetsROVRowImpl row){
        if(row != null){
            quesionBeforDeleteToolSet(row);
        }
    }
	
    private void quesionBeforDeleteToolSet(ToolSetsROVRowImpl row) {
        OasisDynamicPopup confirmDialog = new OasisDynamicPopup(13874L);
        confirmDialog.setDialogType("yesNo");
        confirmDialog.setConfirmText("Yes");
        confirmDialog.setCancelText("No");
        confirmDialog.registerDialogCallback((outcome) -> {
            if (DialogEvent.Outcome.yes.equals(outcome)) {
                try{
                    toolSetId = row.getToolSetId();
//                    removeToolSet(row);
                    row.remove();
                    toolSetView().getDBTransaction().commit();
                    CommonADFUtils.refreshIterator(ToolSetIterators.TOOLSET_ROV);
                    OasisDynamicPopup.showSuccessDeleteMessage();
                }catch(Exception e){
//                    refreshEntity((ToolSetsROVImpl) row.getViewObject());
                    toolSetView().getDBTransaction().rollback();
                    CommonADFUtils.refreshIterator(ToolSetIterators.TOOLSET_ROV);
                    ToolSetsROVImpl vo = (ToolSetsROVImpl) pageDef.get().getIterator("ToolSetsROVIterator").getViewObject();
                    vo.findAndSetCurrentRowByKey(new Key(new Object[] { CommonUserDataFactory.getCommonUserData()
                                                                        .getHospitalId(), toolSetId }), 1);
                    setRowKeySet(new Key(new Object[] {CommonUserDataFactory.getCommonUserData().getHospitalId(),toolSetId}));
                    ErrorUtils.handle(e);
                }
            }
            refresh(ToolSetContainers.MANAGE_PAGE);
        });
        confirmDialog.show();
    }

// create popup from code and delete record 
________________________________________________________________________________________________________

ErrorUtils.handle(e);
OR
new SimpleErrorHandling().handle(e);

//error handle
________________________________________________________________________________________________________
refresh(ToolSetContainers.MANAGE_PAGE);

public void refresh(String compId) {
    UIComponent component = CommonJSFUtils.findComponent(compId);
    if (component != null)
        reRenderComponents(new String[] { compId });
}
//refresh component
________________________________________________________________________________________________________
toolSetView().getDBTransaction().commit();
toolSetView().getDBTransaction().rollback();

private ToolSetsROVImpl toolSetView(){
    return (ToolSetsROVImpl) pageDef.get()
                            .getIterator("ToolSetsROVIterator")
                            .getViewObject();
}
	
// commit and rollback in code
________________________________________________________________________________________________________

    /**
     * added global search view criteria to viewobject
     * @param value search value null value will remove global search
     */
    public void applyDynamicSearchViewCriteria(String param) {  // IN VO Impl
        if (param == null || param.toString().isEmpty()) {
            removeApplyViewCriteriaName("AutoSearchVC");
        } else {
            ViewCriteria autoSearchVC = this.createDynamicSearchViewCriteria("AutoSearchVC", new String[] { "Description" }, param);
            applyViewCriteria(autoSearchVC);
        }
        this.executeQuery();
    }

	private String description ;
	.
	.
	.
	    public void setDescription(String description) {
        this.description = description;
        ((ToolSetsROVImpl) pageDef.get()
                                  .getIterator(ToolSetIterators.TOOLSET_ROV)
                                  .getViewObject()).applyDynamicSearchViewCriteria(description);
        refresh(ToolSetContainers.MANAGE_PAGE);
    }
// cerate VC by code
________________________________________________________________________________________________________

    public void filterSessionListByStatus(String status){
        if(StaticVar.ALL.equals(status)){
            removeApplyViewCriteriaName(StaticVar.STATUS_VC) ;
        }else{
            setstatusVCA(status);
            setApplyViewCriteriaName(StaticVar.STATUS_VC);
        }
           executeQuery();
    }
	
	    public void setstatusVCA(String value) {
        ensureVariableManager().setVariableValue("statusVCA", value);
    }
// after create vc in VO make Impl vo set and execute vc
________________________________________________________________________________________________________

#{bindings.TeamsDataRVO.attributes[0]} // TF parameter sent PK for vo
________________________________________________________________________________________________________

#{agentInfo.lg or  agentInfo.gtLg or (!agentInfo.lg and !agentInfo.gtLg and viewScope.toolSetsBean.tabletMode eq 'Master')}

refresh(agentInfo().isSm() || agentInfo().isMd() ? ToolSetContainers.MANAGE_PAGE : ToolSetContainers.DETAILS_COLUMN);

private AgentInfoBean agentInfo(){
    return (AgentInfoBean) CommonJSFUtils.getFromSessionScope("agentInfo");
}
//get agentInfo in Bean 
________________________________________________________________________________________________________

CommonJSFUtils.showPopupById(SessionPopups.ADD_SESSION_POPUP);
//show popup by id
________________________________________________________________________________________________________

private SessionDetailAMImpl appModule(){
    return (SessionDetailAMImpl) getApplicationModule();
}
//get AM in Impl VO
________________________________________________________________________________________________________

//AMImp
public BigDecimal checkSessionDelete(SessionDetailROVRowImpl rec , BigDecimal workEntity){
    return (BigDecimal) callStoredFunction(NUMBER, "Sessions_Utl.OR_Check_Session_Delete(?,?,?)", new Object[] { workEntity ,rec.getOperatingSessionCode(),rec.getStaffId() });
}
    
public Integer deleteStaffSession(BigDecimal workEntity , SessionDetailROVRowImpl rec ) {
    CallableStatement st = null;
    Integer result = -99;
    Savepoint savepoint = null;
    try {
            st = getDBTransaction().createCallableStatement("begin ? := Sessions_Utl.OR_Delete_Staff_Session(?,?,?); end;", 0);
            savepoint = st.getConnection().setSavepoint();
            st.registerOutParameter(1, Types.NUMERIC);
            st.setObject(2, workEntity);
            st.setObject(3, rec.getOperatingSessionCode());
            st.setObject(4, rec.getStaffId());
            st.executeUpdate();
            result = Optional.ofNullable(st.getObject(1))
                             .map(Object::toString)
                             .map(Integer::valueOf)
                             .orElse(-99);
    } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
    } finally {
        if (st != null) {
            try {
                if (result.equals(0))
                    st.getConnection().commit();
                else
                    st.getConnection().rollback(savepoint);
                    st.close();
            } catch (SQLException e) {
                throw new JboException(e);
            }
        }
    }
    return result;
}


//VO Impl
public void checkSessionDelete(BigDecimal workEntity , Consumer<Integer> result){
    result.accept(appModule().checkSessionDelete(this, workEntity).intValue());
}
    
public void deleteStaffSession(BigDecimal workEntity , Consumer<Integer> result){
    result.accept(appModule().deleteStaffSession(workEntity , this)) ;
}


//code bean 
public void actionRemoveSession(SessionDetailROVRowImpl row) {
    if (row != null) {
        try {
            row.checkSessionDelete(workEntity(), result -> {
                if (result.equals(0)) {
                askForDeleteSession(row);
                } else if (result.equals(-2) || result.equals(-3)) {
                ErrorUtils.showPopupError(13574L);
                }
                });
        } catch (Exception e) {
            ErrorUtils.handle(e);
        }
    refresh(Containers.MANAGE_PAGES);
        }
}
    
    
private void askForDeleteSession(SessionDetailROVRowImpl row){
    OasisDynamicPopup confirmDialog = new OasisDynamicPopup(12896L);
    confirmDialog.setDialogType("yesNo");
    confirmDialog.setConfirmText(OasisModelUtils.getInstance().getOasisResourceKey("YES"));
    confirmDialog.setCancelText(OasisModelUtils.getInstance().getOasisResourceKey("NO"));
    confirmDialog.registerDialogCallback((outcome) -> {
    if (DialogEvent.Outcome.yes.equals(outcome)) {
        row.deleteStaffSession(workEntity() , result ->{
        if (result.equals(0)){
            doTaskFlowCommit();
            CommonADFUtils.refreshIterator(Iterators.SESSION_DETAIL);
            mainBean().actionRefIter(sessionDetailStrem.get().count() > 0 ? sessionDetailStrem.get().map(SessionDetailROVRowImpl.class::cast).findFirst().get().getOperatingSessionCode() : null);
            refresh(Containers.MANAGE_PAGES);
        }
        else if (result.equals(-2) || result.equals(-3))
            ErrorUtils.showPopupError(13574L);
        });
    }
    });
    confirmDialog.show();
}

//call functions in AM by Impl VO in code
________________________________________________________________________________________________________

public Boolean checkIfThisExtendWillOverlapWithAnotherSession(BigDecimal workEntity , SessionDetailROVRowImpl rec , Date endDate){
    AnotherSessionsROVImpl vo = this.getAnotherSessionsROV();
    vo.setP_SessionCode(rec.getOperatingSessionCode());
    vo.setP_WorkEntity(workEntity);
    vo.setP_EndDate(SessionModelUtils.convertDateToString(endDate));
    vo.executeQuery();
    return vo.first() != null ;
}


public Boolean overlapWithAnotherSessions(BigDecimal workEntity , Date endDate){
    return appModule().checkIfThisExtendWillOverlapWithAnotherSession(workEntity, this, endDate);
}
	
//check if VO incloudes any record
________________________________________________________________________________________________________

<!--<af:selectOneChoice label=" " id="socConsType" simple="true" autoSubmit="true"
        value="#{bindings.ConsType}">
        <af:forEach var="items" items="#{bindings.ConsTypeLOV1.rangeSet}">
            <af:selectItem label="#{items.UserCode}" id="si1" value="#{items.Code}"/>
        </af:forEach>
    </af:selectOneChoice>-->
    <af:selectOneChoice value="#{bindings.ConsType.inputValue}" unselectedLabel="#{oasisBundle['ALL']}"
        label=" " id="smc1" simple="true" autoSubmit="true">
    <f:selectItems value="#{bindings.ConsTypeLOV.items}" id="si1"/>
    <f:validator binding="#{bindings.ConsTypeLOV.validator}"/>
</af:selectOneChoice>
//used selectOneChoice by drop selectManyChoice then replace component name and show how forEach work
________________________________________________________________________________________________________

public void serialNoValidator(@SuppressWarnings("oracle.jdeveloper.java.unused-parameter")
                            FacesContext facesContext, UIComponent uIComponent, Object object) {
    String serialNo = (String) object;
    if (object != null) {
        BigDecimal iosMain = getIosMainMemo();
        if (iosWithSerialIsDuplicated(serialNo, iosMain)) {
            Optional.of(uIComponent)
                .map(RichInputText.class::cast)
                .map((comp) -> showMessageForComponent(comp, 1150304L) )
                .ifPresent((comp) -> comp.setValid(false));
        }
    }
}
    
public boolean iosWithSerialIsDuplicated(String serialNo, BigDecimal iosMain) {
    if (getPopupModeMemo().equals("C"))
        return pageDef.get()
            .getIteratorStream("OperatingInstrumentsIosVOIterator")
            .map(OperatingInstrumentsIosVORowImpl.class::cast)
            .anyMatch((row) -> row.getSerialNo().equals(serialNo) && row.getIosMain().equals(iosMain));
    else
        return pageDef.get()
            .getIteratorStream("OperatingInstrumentsIosVOIterator")
            .map(OperatingInstrumentsIosVORowImpl.class::cast)
            .anyMatch((row) -> row.getSerialNo().equals(serialNo) && row.getIosMain().equals(iosMain) &&
                        !row.getOrInstrumentId().equals(getOrInstrumentIdMemo()));
}
    
protected <T extends UIComponent> T showMessageForComponent(T comp, long messageNo) {
    showMessageForComponent(comp.getId(), new OasisBusinessException(messageNo).getErrorMessage());
    return comp;
}
OR
private void errorMessageForComponent(String compId , long errorNo){
    showMessageForComponent(compId, new OasisBusinessException(errorNo).getErrorMessage());
}
//add validation to inpute text from bean using Validator properity
________________________________________________________________________________________________________

OasisDynamicPopup.showErrorMessage(errorNo);
//show error msg by popup
________________________________________________________________________________________________________

OasisDynamicPopup.showSuccessSavedMessage();
//show success save msg
________________________________________________________________________________________________________

public void filter(BigDecimal ios, String search , BigDecimal category){
    applySearchFilter(ios,search);
    applyCategoryFilter(category);
    executeQuery();
    }
    
private void applySearchFilter(BigDecimal ios, String search){
    if (search == null || search.toString().trim().isEmpty()) {
        removeApplyViewCriteriaName("itemSearchVC");
    } else {
        String[] params = ios == null ? new String[] { "ItemDescription", "Ios" , "IosMain" , "IosUser" } : new String[] {"Ios"};
        ViewCriteria itemSearchVC = this.createDynamicSearchViewCriteria("itemSearchVC", params, ios == null ? search : ios.toString());
        applyViewCriteria(itemSearchVC);
    }
}

private void applyCategoryFilter(BigDecimal category) {     
    setcategoryVCA(category);
    if (category == null)
        removeApplyViewCriteriaName("CategoryVC");
    else
        setApplyViewCriteriaName("CategoryVC", true);
}
// filter table from filter section in RVO Impl
________________________________________________________________________________________________________

public String getWard() {
    return Optional.ofNullable(getPatientSleepingDetailsAccessorROV())
        .map(RowIterator::first)
        .map(PatientSleepingDetailsROVRowImpl.class::cast)
        .map(PatientSleepingDetailsROVRowImpl::getWardDescription)
        .orElse(null);
}
// set transiat attribute from Impl by VL ==> Accessor
________________________________________________________________________________________________________

#{appPrefBean.tableGlobalProperties.horizontalGridVisible}
#{appPrefBean.tableGlobalProperties.verticalGridVisible}
#{appPrefBean.tableGlobalProperties.scrollPolicy}
#{appPrefBean.tableGlobalProperties.columnResizing}
#{appPrefBean.tableGlobalProperties.disableColumnReordering}
#{appPrefBean.tableGlobalProperties.contentDelivery}

//table Global Properties

________________________________________________________________________________________________________

        <f:attribute name="hideSeachSection" value="true"/>
        <f:attribute name="showSearchToggleButton" value="false"/>
        <f:attribute name="showTitle" value="false"/>
        <f:attribute name="searchType" value="none"/>
// template properties

________________________________________________________________________________________________________

CommonJSFUtils.showErrorMessageInOasisListOfValues("proc_olov",
    OasisModelUtils.getInstance()
    .getOasisBundledKey("REQUIRED_MESSAGE"));
	
showMessageForComponent("team_desc",
    OasisModelUtils.getInstance()
    .getOasisBundledKey("REQUIRED_MESSAGE"));
//show error msg required in component
	
________________________________________________________________________________________________________

1) add method in onLaunch for oasis LOV
    private void prepareAllStaffLov(){
        CommonViewObjectImpl vo = (CommonViewObjectImpl) pageDef.get()
                                                                .getIterator("AllStaffLOVIterator")
                                                                .getViewObject();
        vo.setWhereClause(null);
        vo.addWhereClause("1 = 1");
        vo.addWhereClause(String.format("AND QRSLT.staff_id not in(%s)", pageDef.get()
            .getIteratorStream("TeamStaffVOIterator")
            .map(TeamStaffVORowImpl.class::cast)
            .map(TeamStaffVORowImpl::getStaffId)
            .collect(Collectors.joining("','", "'","'"))));
        vo.executeQuery();
    }
2) add VC not exsist after add new VL
3) add custom operation :
IN (select regexp_substr(:P_IosMainList,'[^,]+', 1, level) from DUAL connect by regexp_substr(:P_IosMainList, '[^,]+', 1, level) is not null )
// make lov not repeat value after add it befor commit
________________________________________________________________________________________________________

code:

    private List<SelectItem> prepareConsultationType() {
        OasisModelUtils modelUtils = OasisModelUtils.getInstance();
        List<SelectItem> items = new ArrayList<SelectItem>();
        String consType = findConsType();
        if (consType != null) {
            if("A".equals(consType)){
                items.add(new SelectItem("A", modelUtils.getOasisResourceKey("ALL")));
                items.add(new SelectItem("I", modelUtils.getOasisResourceKey("IN_HOSPITAL_CONSULTATION")));
                items.add(new SelectItem("V", modelUtils.getOasisResourceKey("VIRTUAL_CONSULTATION")));
            }else if("I".equals(consType)){
                items.add(new SelectItem("I", modelUtils.getOasisResourceKey("IN_HOSPITAL_CONSULTATION")));
            }else if("V".equals(consType)){
                items.add(new SelectItem("V", modelUtils.getOasisResourceKey("VIRTUAL_CONSULTATION")));
            }
            portalSpecificTime.setConsultationType(consType);
        }
        return items ;
    }
	
component:

ConsultationType lov in code and in component
// used OasisSelectResources 
________________________________________________________________________________________________________

overflow-visible
inlineStyle="z-index:6 !important; "

inlineStyle="margin-top:25px;"

// make oasis lov overfow

________________________________________________________________________________________________________
    
private String getManageMaintainTeamsPagePath() {

    return "/WEB-INF/com/balsam/oasis/maintain-team/ManageMaintainTeams.jsff";
}

public void onExit() {

    PageDefinitionImpl.findPageDefinition(getManageMaintainTeamsPagePath()).releaseDataControl("MaintainTeamsAMDataControl");
}
	
//refresh transaction to fixed filter table

________________________________________________________________________________________________________

import oracle.jbo.ViewCriteriaItem;

    @Override
        public String getCriteriaItemClause(ViewCriteriaItem viewCriteriaItem) {
            viewCriteriaItem.setUpperColumns(true);
            if (viewCriteriaItem.getValue() != null && !viewCriteriaItem.getValue().toString().contains("%") && viewCriteriaItem.getViewCriteria().getName().contains("__filterlist__") && viewCriteriaItem.getOperator().equals("STARTSWITH")) {
                viewCriteriaItem.setValue("%" + viewCriteriaItem.getValue().toString().trim());
            }
            if (viewCriteriaItem.getValue() != null && !viewCriteriaItem.getValue().toString().contains("%") && viewCriteriaItem.getViewCriteria().getName().contains("__ImplicitViewCriteria__") && viewCriteriaItem.getOperator().equals("STARTSWITH")) {
                viewCriteriaItem.setValue("%" + viewCriteriaItem.getValue().toString().trim());
            }

            if (viewCriteriaItem.getValue() != null && !viewCriteriaItem.getValue().toString().contains("%") && viewCriteriaItem.getViewCriteria().getName().contains("__FilterViewCriteria__") && viewCriteriaItem.getOperator().equals("STARTSWITH")) {
                viewCriteriaItem.setValue("%" + viewCriteriaItem.getValue().toString().trim());
            }

            return super.getCriteriaItemClause(viewCriteriaItem);
        }
		
// make filter cloumn in table work by contains insted of equals
________________________________________________________________________________________________________

            String formattedErrorMsg =
                MessageFormat.format((new OasisBusinessException(14556L).getErrorMessage()), maxDate.toString());
            showMessageForComponent(compId, formattedErrorMsg);
			
// show error msg with bind values

________________________________________________________________________________________________________

OasisModelUtils.getInstance().displayStaffName(staffId, formate ('LONG' or 'SHORT'))

//get staff name by staff id in transiate attribute

OasisModelUtils.getInstance().displayStaffNameByUser(staffId, formate ('LONG' or 'SHORT'))

//get staff name by user id


#{viewScope.systemCodesBean.onExit}

    private String getManageSystemCodesPagePath() {
            return "/WEB-INF/com/balsam/oasis/systemcodes/ManageSystemCodes.jsff";
        }

        public void onExit() {
            PageDefinitionImpl.findPageDefinition(getManageSystemCodesPagePath()).releaseDataControl("SystemCodesAMDataControl");
        }

//finalizer TF to fixed catching filter when changing page from menu

________________________________________________________________________________________________________

<af:convertDateTime pattern="#{userBean.dateFormat}"/>

// date pattern

________________________________________________________________________________________________________

    public void resetCodesData(){
        getCodesDataVO().clearViewCriterias();
        getCodesDataVO().executeQuery();
    }
	
// this method added in AM impl when we need refresh table with filtrable fields

________________________________________________________________________________________________________

    private static final String DIAGNOSIS_APPLICATION_MODULE = "ManageDiagnosisAMDataControl";

private ManageDiagnosisAMImpl findDiagnosisAM() {
    return (ManageDiagnosisAMImpl) CommonADFUtils.getApplicationModuleForDataControl(DIAGNOSIS_APPLICATION_MODULE);
}

// get AM from bean

________________________________________________________________________________________________________

            <af:button text="#{messages['FACESHEET_LABRESULTS_PRINT_REPORT']}" id="b1" actionListener="#{viewScope.laboratoryResultsBean.printLabResultReport}" actionDelivery="clientServer" styleClass="icon fa-print">
            <f:attribute name="LabId" value="#{noneRow.bindings.LabId.inputValue}"/>
													
        Object labIdObj = actionEvent.getComponent()
                                     .getAttributes()
                                     .get("LabId");
									 
//get value from table using attribute component



________________________________________________________________________________________________________


        StringBuilder script = new StringBuilder();
        script.append(String.format("var byteCharacters = atob('%s'); ", Base64.getEncoder().encodeToString(data.toByteArray())))
              .append("var contentType = '" + mimeType + "';")
              .append("var byteArrays = []; ")
              .append("for (let offset = 0; offset < byteCharacters.length; offset += 1024) { ")
              .append("var slice = byteCharacters.slice(offset, offset + 1024); ")
              .append("var byteNumbers = new Array(slice.length); ")
              .append("for (let i = 0; i < slice.length; i++) { ")
              .append("byteNumbers[=6i] = slice.charCodeAt(i); } ")
              .append("var byteArray = new Uint8Array(byteNumbers); ")
              .append("byteArrays.push(byteArray); } ")
              .append("var blob = new Blob(byteArrays, {type: contentType}); ")
              .append("var blobUrl = URL.createObjectURL(blob); ")
              .append("window.open(blobUrl, '_blank'); ");
        callJavaScriptFunction(script.toString());
		
//call javascript in java

________________________________________________________________________________________________________

    private String mrn;
    private Date dob;
    private String sex;

PatientUtilsAMImpl.lookupForInstance((am) -> {
            PatientInfoROVRow patientRow = am.findPatientInfoRow(patientId);
            this.mrn = patientRow.getMrn();
            this.sex = patientRow.getSex();
            this.dob = patientRow.getDateOfBirth();
});

//get patient details by patient id 

OR //in imp by transient 


    public String getPatientMrn() {
        BigDecimal patientId = getPatientId();
        if (patientId != null) {
            Key key = new Key(new Object[] { CommonUserDataFactory.getCommonUserData().getHospitalId(), patientId });
            PatientMasterImpl entity =
                (PatientMasterImpl) PatientMasterImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            if (entity != null)
                return entity.findActiveMrn();
        }
        return (String) getAttributeInternal(PATIENTMRN);
    }
	
	
	public String getPatientName() {
        return Optional.ofNullable(getPatientId())
                       .map(id -> OasisModelUtils.getInstance().displayPatientName(id, "LONG"))
                       .orElse((String) getAttributeInternal(PATIENTNAME));
    }
	
	public String getStaffName() {
        return Optional.ofNullable(getStaffId())
                       .map(id -> OasisModelUtils.getInstance().displayStaffName(id, "LONG"))
                       .orElse((String) getAttributeInternal(PATIENTNAME));
    }
	
//get nrm and patient name by patient id and staff name by staff id in transient att
________________________________________________________________________________________________________

adf.userSession.userData.opdCSRestrictedUser // HOW AD NEW ATTRIBUTE TO SESSION_DETAIL

IN FiltersAMImpl add method :


    @SuppressWarnings("unchecked")
    public void prepareClinicSessions(){
        getSession().getUserData().put("opdCSRestrictedUser", isRestrictedUser());
    }
	
	    private String isRestrictedUser() {
        StringBuilder query = new StringBuilder("SELECT ");
        query.append("NVL (m6.restrict_clinic_flag, 'N') restrict_clinic_flag ")
             .append("FROM maps006 m6 ")
             .append("WHERE m6.user_id = ? ")
             .append("AND m6.hospital_id = ? ");
        CommonUserData commonUserData = CommonUserDataFactory.getCommonUserData();
        return (String) executeQuery(query.toString(), commonUserData.getUserId(), commonUserData.getHospitalId());
    }
	
	    
    public Object executeQuery(String query , Object... params) {
        Object result = null;
        PreparedStatement st = getDBTransaction().createPreparedStatement(query, 1);
        ResultSet rs = null;
        try {
            IntStream.rangeClosed(1, params.length).forEach((i) -> {
                try {
                    st.setObject(i, params[i - 1]);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });
            rs = st.executeQuery();
            if (rs.next())
                result = rs.getObject(1);
            rs.close();
            st.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }
	
	
	adf.userSession.userData.opdCSRestrictedUser

OR



    @SuppressWarnings("unchecked")
    public void prepareClinicSessions(){
        getSession().getUserData().put("opdTreRoRestrictedUser", getRestrictClinicFlag());
    }
    
    private String getRestrictClinicFlag() {
        return Optional.ofNullable(CommonUserDataFactory.getCommonUserData().getUserId())
                       .map(id -> Maps006Impl.createPrimaryKey(CommonUserDataFactory.getCommonUserData().getHospitalId(), id))
                       .map(key -> Maps006Impl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key))
                       .map(Maps006Impl.class::cast)
                       .map(Maps006Impl::getRestrictClinicFlag)
                       .orElse("N");
    }
	
	
adf.userSession.userData.opdTreRoRestrictedUser



// add new attribute to session to use it in bind variable


________________________________________________________________________________________________________


CommonJSFUtils.showRequiredMessageInOasisListOfValues("os_lst_diag");

//requires msg for lov by id 

________________________________________________________________________________________________________

this.orderedDate = new Date(new java.util.Date().getTime());

//get date time




###########################################Spring Boot#########################################################

    private final RowMapper<PatientDevice> patientDeviceRowMapper = (rs, rowNum) -> {
        PatientDevice device = new PatientDevice();
        device.setPlatform(rs.getString("PLATFORM"));
        device.setDeviceToken(rs.getString("DEVICE_TOKEN"));
        return device;
    };
	
	
	public List<PatientDevice> findByPatientId(Long patientId) {
        String sql = "SELECT * FROM APP_PATIENT_DEVICES WHERE PATIENT_ID = ?";
        return jdbcTemplate.query(sql, patientDeviceRowMapper, patientId);
    }

// how using jdbcTemplate with RowMapper class
________________________________________________________________________________________________________

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-mongodb</artifactId>
			<version>2.2.6.RELEASE</version>
		</dependency>
    </dependencies>

	<repositories>
		<repository>
			<id>oasis-repo</id>
			<name>oasis-repo</name>
			<url>https://mvn.oasisapp.services/releases</url>
		</repository>
	</repositories>
	
	<dependency>
  <groupId>com.balsam.oasis.common</groupId>
  <artifactId>oasis-common</artifactId>
  <version>81</version>
   </dependency>
   
// common repo
________________________________________________________________________________________________________



OasisCodesSingleton.getInstance().findCodeByUserCode(BigDecimal.valueOf(5L), userCode, hospitalId)

//get code in bean by user code

________________________________________________________________________________________________________


 <af:setPropertyListener from="trMnPage" to="#{sharedLookupBean.rerenderIds}"
   type="valueChange"/>
   
//refresh when valueChange on page source
   
________________________________________________________________________________________________________

add lib to page :

 xmlns:fn="http://java.sun.com/jsp/jstl/functions"
 
 ex: 
 
    disabled="#{fn:containsIgnoreCase(row.PatName1,sharedLookupBean.ruleValue['UNKNOWNPATNAME1,NAN'])}
 
 
// add function direct to page without transient attribute
 
________________________________________________________________________________________________________


        DraftsDiagnosisVOImpl vo = findDiagnosisAM().getDraftsDiagnosisVO();
        RowSetIterator rsIter = vo.createRowSetIterator(null);
        rsIter.reset();

        while (rsIter.hasNext()) {
            System.out.println(" in_looping ....");
            DraftsDiagnosisVORowImpl row = (DraftsDiagnosisVORowImpl) rsIter.next();
            String status = row.getStatus();
            if (status != null || "Q".equals(status)) {
                if (row.getActiveUntilDate() != null)
                    row.setStatus("I");
                else
                    row.setStatus("A");
            }
        }
		
        rsIter.closeRowSetIterator();
		
// createRowSetIterator using RowSetIterator to loop to all records

________________________________________________________________________________________________________


DECLARE
  v_result NUMBER;
BEGIN
  v_result := Order_Utl.Validate_Diet_Assignment(123, 456, 'E', 789);
  DBMS_OUTPUT.PUT_LINE('Result: ' || v_result);
END;

// call function in Toad

________________________________________________________________________________________________________

    private ManageDiagnosisAMImpl findDiagnosisAM() {
        return (ManageDiagnosisAMImpl) CommonADFUtils.getApplicationModuleForDataControl(DIAGNOSIS_APPLICATION_MODULE);
    }

    private static final String DIAGNOSIS_APPLICATION_MODULE = "ManageDiagnosisAMDataControl";
	
//get AM impl by data control name

________________________________________________________________________________________________________

        Map params = new HashMap();
        params.put("DescrptionVC", object);
        executeOperation("ExecuteFoodSearch", params);
		
executeOperation using params

________________________________________________________________________________________________________

    public BigDecimal getDiagnosisDivisionVCA() {
        final long codeType = 292;
        AtomicReference<BigDecimal> diagnosisDivisionVCAAtomic = new AtomicReference<BigDecimal>();
        final String sql =
            "SELECT CODE \n" + "      FROM   CODES_DATA\n" + "      WHERE  CODE_TYPE = ? \n" +
            "      AND    USER_CODE = 'DIAG'";

        OasisModelUtils.getInstance().streamQuery(sql, new Object[] { codeType }, row -> {
            if (row.get("CODE").get() != null) {
                diagnosisDivisionVCAAtomic.set(new BigDecimal(row.get("CODE")
                                                                 .get()
                                                                 .toString()));
            }
        });
        diagnosisDivisionVCA = diagnosisDivisionVCAAtomic.get();
        System.out.println(" [ diagnosisDivisionVCA :: " + diagnosisDivisionVCA + " ] ");
        return diagnosisDivisionVCA;
    }
	
get diagnosisDivision in bean